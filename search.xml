<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[STL]]></title>
    <url>%2F2019%2F09%2F08%2FSTL%2F</url>
    <content type="text"><![CDATA[STL 六大组件 功能与运用1. 容器各种数据结构 ，vector ，list ，deque，set，map，从实现角度来看，STL容器是一种class template 2. 算法各种常用算法，sort，search，copy，erase，从实现角度来看，STL容器是一种function template 3. 迭代器扮演容器与算法之间的胶合剂，泛型指针，有五种类型，从实现角度来说，就是把operator，operator-&gt;,opreator++,opreator–等指针相关操作予以重载的class template ，每个STL容器都附带有自己专属的迭代器。*原生指针也是一种迭代器。** 4. 仿函数什么是仿函数？行为类似函数。 好好体会下这句话 5. 配接器（adapters）顾名思义，想想配接器模式（adapter design） 6. 配置器（allocators）负责空间配置与管理，实现了动态空间配置，空间管理，空间释放。 空间配置器（allocator）)SGI设计了双层级配置器（面试会被问道），主要是为了解决小型区块所可能造成的内存破碎问题。SGI第一级配置器通过 malloc和 free 完成内存的配置与释放。第二级配置器则通过不同的策略来进行操作：首先，看配置区块的大小，看其是否超过128bytes，是的话，给第一级配置器，当配置器区块小于128bytes时，采用memory pool 整理方式。那么，究竟只用第一级就OK，还是同时都用呢，要看__USE_MALLOC 这个参数是否被定义。（侯捷老师这里注：说这个参数名字并不理想，因为无论如何malloc总是要被调用的，对吧）。具体过程看下图。 下面逐个讲解第一级配置器和第二级配置器 第一级配置器： 实现类似C++ new-handler 的机制，不能直接运用该机制，是因为他并非使用operator new 来配置内存。 那么什么是new-handler 机制呢，可以要求系统在内存配置需求无法被满足的时候，调用一个你指定的函数，换句话说，当内存配置不好使的时候，你可以让系统执行你指定的函数。 也就是 :: operator new 没有完成任务，在丢出std::bad_alloc 异常状态之前，会先调用有客户端也就是你指定的处理例程，处理例程通常叫做new-handler。 侯老师在这里多嘱咐了几句：说设计和设定“内存不足处理例程”是客户端的责任，有特定的套路 第二级配置器：小于128bytes时，以内存池管理（memory pool），该方法又称为（sub-allocation）;每次配置一大块内存，并维护对应之自由链表（free-list）。有16个free-lists，各自管理不同大小的小额区块，例如8,16,32,,,每次配置一大块内存，并维护对应的free list，若下次还是相同大小的内存需求，直接从free-list中拨出。 allocate（）函数 ，该函数，首先判断区块大小，大于128，嗯，你懂得，小于的话，就看对应的free-list。如果free-list 内有能用的区块，就直接拿来用，没有的话，将区块上调至8倍数边界，然后调用refill（）函数，准备为free-list重新填充空间。 dellocate（）函数，同样的，首先判断区块大小，大于128，小于128，就找到对应的free-list ，将区块回收。 chunk_alloc() 函数，从内存池中取空间给free-list，首先会判断水量够不够，够的话，就取出20个区块给free-list，不够20个区块，还可以供应一个以上的话，就把这些区块拨出去，问题来了，假如一个都不够的话，该怎么办，对客户端显然无法交代，对不对，通过malloc（）从heap中配置内存，为池子里注入新的水以供使用。新水量为需求的两倍，再加上一个随着配置次数增加而越来越大的附加量。) 内存池（面试题） 迭代器（iterators）概念与traits编程技法STL 的中心思想在于：将数据容器和算法分开，彼此独立设计，最后再以一贴胶水将两者联系在一起。 迭代器是一种smart pointer 序列式容器vectorvector 与array 的区别是什么呢？array 是静态空间，一旦配置了就不能改变，vector是动态空间。vector数据空间是连续线性空间，为了降低空间配置是的速度成本，vector实际配置的大小可能比客户端需求量更大一些。 vector 动态增加大小，并不是在原来的空间之后接续新空间（因为无法保证原始空间后面是不是还有可以分配的空间），而是以原大小的两倍另外配置一块较大的空间，然后将原内容拷贝过来，然后才开始在原内容之后构造新元素，并释放原始空间。 vector 为单向数组，只能pushback 和pop back 腾讯面试题：通过三个迭代器：start，finish，end_of_storage 完成内存分配。 listlist 有个一个prev 和next ，所以为双向链表，而且还是环装双向链表 dequedeque是一个双向开口的连续线性空间。可以在头尾两端分别做元素的插入和删除操作。 deque 的 迭代器的比较复杂相比于vector因此，除非必要，我们应尽可能选择使用vector，而非deque，例如，对deuqe进行排序操作，为了高效，可以将deque先完整复制到一个vector，将vector排序后（利用STL sort 算法），在复制回deque。 deque 数据结构 采用所谓map 作为主控，map是一小块连续空间，其中每个元素（此处叫node，节点）都是指针，指向另一段（较大的）连续线性空间，称为缓冲区。缓冲区才是deque 的存储空间主体。我们可以指定缓冲区的大小。默认为512bytes。 stack以某种既有容器作为底部结构，将其接口改变，让其满足“先进后出”的特性，形成一个stack，是很容易做到的。 queue heap priority_queue slist单向链表 关联式容器RB-tree set底层数据结构 是RB-tree 面对关联式容器，应该使用其所提供的find函数来搜寻元素，效率更高 1itel = iset.find(3); //查找3这个元素 而不是用find（first，last，value） map底层也是RB-tree 树 &lt;key,value&gt; multiset &amp; multimapmultiset 的特性以及用法和set一致的，唯一的区别在于，它允许键值重复，map和multimap 也是如此 hash_set &amp; hash_map &amp; hash_multiset &amp; hash_multimap底层都是hashtable 算法123456789int a[] = &#123;0,1,2,3,4,5,6,6,6,7,8&#125;for_each(begin(),end(),display&lt;int&gt;()); // 可以用来打印 adjacet_find(begin(),end());// 找到相邻元素值相等的第一个元素 ,这里为6adjacet_find(begin(),end(),equal_to&lt;int&gt;());// 找到相邻元素值相等的第一个元素 ,这里为6count(begin(),end(),6) ;// 数组中值为6的个数count_if(begin(),end(),bind2nd(less&lt;int&gt;()),7); // 找出小于7的元素个数 find_if(begin(),end(),bind2nd(greater&lt;int&gt;()),2)// 找出第一个大于2的元素的位置 注：假如未来有一天，我会在这里加上代码，记上常用的算法 仿函数（另名 函数对象 function objects）123456//用户继承 binary_function,便可以取得该仿函数的各种相应的类型eg：template&lt;class T&gt;struct plus :public binary_function&lt;T,T,T&gt;&#123; T opreator()(const T&amp; x,const T&amp; y) const &#123;return x+y&#125;&#125; 配接器]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面经总结基础知识]]></title>
    <url>%2F2019%2F09%2F08%2F%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[计算机网络1.ping命令的基本原理？【答】ping 命令用来测试两个主机间的连通性，使用ICMP（Internet Control Message Protocol，网际控制协议）中会送请求和会送回答请求，是应用层使用网络层ICMP的一个例子，没有通过运输层的TCP和UDP。 ping命令使得本地主机连续发送了四个ICMP回送请求报文，然后远程的主机正常工作的话就会像图中显示的结果一样，响应并发回ICMP回送回答报文。每个报文都有其时间戳，所以最终得出了往返时间以及报文的发送接收丢失的结果。 2. TCP 拥塞控制和流量控制的方法可以参考：https://www.cnblogs.com/wxgblogs/p/5616829.html ，总结的不错 2.1 拥塞控制【答】 拥塞控制： 快重传，慢开始，拥塞避免，以及快回复。 2.2 流量控制【答】 流量控制就是让发送方的发送速率不要太快，让接收方来得及接受。是通过滑动窗口来控制。 3. IPV4 的三类地址 操作系统1. 虚拟内存介绍一下]]></content>
  </entry>
  <entry>
    <title><![CDATA[C++面试问题总结(CPP基础、网络编程)]]></title>
    <url>%2F2019%2F09%2F08%2FC-%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93-CPP%E5%9F%BA%E7%A1%80%E3%80%81%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[1. main 函数 执行前 和执行后会执行什么？【答】main 函数执行之前，主要是初始化系统相关的资源以及函数的初始化工作 设置栈指针 初始化static 静态和global 全局变量，即data段的内容 将还没有初始化的全局变量进行赋值，eg：数值型 short int long 等为0，bool 为false 指针为null，等等，即 bss段 运行全局构造器，进行 C++ 中的函数构造 将main 函数的参数，argc，argv 等传递给main函数，才能 真正运行 main 函数执行之后，会运行 全局对象的析构函数可以用_oneexit 注册一个 函数，它会在main 之后 执行 如果你需要加入一段在main退出后执行的代码，可以使用atexit()函数，注册一个函数。 2. 网络粘包问题参考 ：https://blog.csdn.net/zhangxinrun/article/details/6721495 2.1 长连接 和 短连接【答】 长连接 client 与 server 建立连接后不断开 ，然后再进行 报文发送和 报文接受 短连接client 与 server 每一次进行报文通讯时才进行连接建立，交易完毕后立即断开连接，适用于一点对多点的通讯，例如多个client 与 一个 server 2.2 什么时候需要考虑粘包问题？ 如果利用tcp 每次发送数据，就与对方建立连接，然后双方发送完一段数据后，就关闭连接，这样就不会出现粘包问题 1 因为只有一种包结构，类似于http协议，关闭连接主要要双方都发送 close 连接。 如果发送数据无结构，如文件传输，这样发送方只管发送，接收方只管接受存储就ok，也不用考虑粘包 Ding~~ 如果双方建立建立，需要在连接后一段时间内发送不同的数据结构，所以一般需要在 头 加上 一个数据长度之类的包，以确保接受。 2.3 粘包出现原因：在流传输中，udp 不会出现粘包，因为它有消息边界（参考windows 网络编程） 发送端需要等缓冲区满才发送出去，会造成粘包 接受方不及时接受缓冲区的包，造成多个包接受 2.4 解决方法 对于发送方引起的粘包现象，用户可通过编程设置类避免，TCP提供了强制数据立即传送的push 指令，也就是说不必等着 缓冲区满才发送出去， 对于接受方引起的粘包，则可以通过优化程序设计，精简接受进程工作量，提高接受进程优先级等措施，使其及时接受数据，从而避免出现粘包问题， 由 接受方控制，将一包数据按结构 字段，人为控制分多次接收，然后合并，通过这种手段来避免粘包 以上提到的三种措施，都有其不足之处。第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。 第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。 第三种方法虽然避免了粘包，但应用程序的效率较低，对实时应用的场合不适合。 2.5 网络现象解释A.先接收到data1,然后接收到data2.B.先接收到data1的部分数据,然后接收到data1余下的部分以及data2的全部.C.先接收到了data1的全部数据和data2的部分数据,然后接收到了data2的余下的数据.D.一次性接收到了data1和data2的全部数据. 为什么会出现B.C.D的情况.“粘包”可发生在发送端也可发生在接收端. 1.由Nagle算法造成的发送端的粘包:Nagle算法是一种改善网络传输效率的算法.简单的说,当我们提交一段数据给TCP发送时,TCP并不立刻发送此段数据,而是等待一小段时间,看看在等待期间是否还有要发送的数据,若有则会一次把这两段数据发送出去.这是对Nagle算法一个简单的解释,详细的请看相关书籍.象C和D的情况就有可能是Nagle算法造成的. 注: Nagle算法 用于自动连接许多的小缓冲器消息；这一过程（称为nagling）通过减少必须发送包的个数来增加网络软件系统的效率。 2.接收端接收不及时造成的接收端粘包:TCP会把接收到的数据存在自己的缓冲区中,然后通知应用层取数据.当应用层由于某些原因不能及时的把TCP的数据取出来,就会造成TCP缓冲区中存放了几段数据. 2.6 UDP 会出现粘包问题吗？【答】 对于UDP，不会使用块的合并优化算法，这样，实际上目前认为，是由于UDP支持的是一对多的模式，所以接收端的skbuff(套接字缓冲区）采用了链式结构来记录每一个到达的UDP包，在每个UDP包中就有了消息头（消息来源地址，端口等信息），这样，对于接收端来说，就容易进行区分处理了。所以UDP不会出现粘包问题 2.7 保护消息边界和流参考：https://blog.csdn.net/tiandijun/article/details/41961785 保护消息边界和流 那么什么是保护消息边界和流呢? 保护消息边界，就是指传输协议把数据当作一条独立的消息在网上传输，接收端只能接收独立的消息。也就是说存在保护消息边界，接收端一次只能接收发送端发出的一个数据包。而面向流则是指无保护消息保护边界的，如果发送端连续发送数据，接收端有可能在一次接收动作中，会接收两个或者更多的数据包。 例如，我们连续发送三个数据包，大小分别是2k，4k ，8k,这三个数据包，都已经到达了接收端的网络堆栈中，如果使用UDP协议，不管我们使用多大的接收缓冲区去接收数据，我们必须有三次接收动作，才能够把所有的数据包接收完.而使用TCP协议，我们只要把接收的缓冲区大小设置在14k以上，我们就能够一次把所有的数据包接收下来，只需要有一次接收动作。 注意： 这就是因为UDP协议的保护消息边界使得每一个消息都是独立的。而流传输却把数据当作一串数据流，他不认为数据是一个一个的消息。所以有很多人在使用tcp协议通讯的时候，并不清楚tcp是基于流的传输，当连续发送数据的时候，他们时常会认识tcp会丢包。其实不然，因为当他们使用的缓冲区足够大时，他们有可能会一次接收到两个甚至更多的数据包，而很多人往往会忽视这一点，只解析检查了第一个数据包，而已经接收的其他数据包却被忽略了。所以大家如果要作这类的网络编程的时候,必须要注意这一点。 3. 内存池的设计参考 STL源码解析 ，其中有对 STL 内存池的介绍 4. 网络编程中的加密算法4.1 如何解决数据传输的安全问题？4.2 加密算法]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用FileZilla 上传 文件 到 linux 时 提示550 Permission denied]]></title>
    <url>%2F2019%2F09%2F08%2F%E4%BD%BF%E7%94%A8FileZilla-%E4%B8%8A%E4%BC%A0-%E6%96%87%E4%BB%B6-%E5%88%B0-linux-%E6%97%B6-%E6%8F%90%E7%A4%BA550-Permission-denied%2F</url>
    <content type="text"><![CDATA[问题现象在Windows系统中使用FileZilla 上传文件时提示”550 Permission denied”错误时（如下图） 问题原因FileZilla 不能使用 解决方案关键是第二步]]></content>
  </entry>
  <entry>
    <title><![CDATA[微服务]]></title>
    <url>%2F2019%2F09%2F08%2F%E5%BE%AE%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[定义微服务是由以单一应用程序构成的小服务，自己拥有自己的行程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用HTTP API 通信。同时服务会使用最小的规模的集中管理（例如Docker）能力，服务可以用不同的编程语言与数据库等组件实现。 核心想法是让服务由类似Unix管道的访问方式使用，而且复杂的服务背后是使用简单URI来开放接口，任何服务，任何细粒都能被开发。 数据库微服务理念中有数个数据库的规划方式。 每个服务都各有一个数据库，同属性的服务可共享同个数据库。所有服务都共享同个数据库，但是不同表格，并且不会跨域访问。每个服务都有自己的数据库，就算是同属性的服务也是，数据库并不会共享。 内容一个微服务架构的应用程序有下列特性： 每个服务都容易被取代 服务是以能力来组织的，例如用户界面、前端、推荐系统、账单或是物流 由于功能被拆分成多个服务，因此可以由不同的编程语言、数据库实现 架构是对称而非分层（即 消费者和生产者的关系）]]></content>
  </entry>
  <entry>
    <title><![CDATA[启动zookeeper成功查看状态时却显示It is probably not running]]></title>
    <url>%2F2019%2F09%2F08%2F%E5%90%AF%E5%8A%A8zookeeper%E6%88%90%E5%8A%9F%E6%9F%A5%E7%9C%8B%E7%8A%B6%E6%80%81%E6%97%B6%E5%8D%B4%E6%98%BE%E7%A4%BAIt-is-probably-not-running%2F</url>
    <content type="text"><![CDATA[可以 通过 下面命令来看错在哪里 1zkServer.sh start-foreground]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F09%2F08%2Fcp%E3%80%81-%E9%80%9A%E9%85%8D%E7%AC%A6%E3%80%81mv%E5%91%BD%E4%BB%A4%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[title: cp、 通配符、mv命令实例date: 2019-09-08 14:12:14tags: linux cp mv 通配符 关于linux 的基础知识，包括文件系统和一些简单的指令http://billie66.github.io/TLCL/book/index.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[符号链接和硬链接]]></title>
    <url>%2F2019%2F09%2F08%2F%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[硬链接一个文件至少有一个硬链接，因为文件名就是由链接创建的。 可以理解为C++ 中的引用，创建多个名字，链接到同一块文件数据中。 123#可以使用命令：ls -li来查看 命令的inode 的索引节点指向 硬链接 的两个缺点： 不能跨越物理设备 不能关联目录，只能是文件。符号链接 若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软连接。软链接就是一个普通文件，只是数据块内容有点特殊。软链接有着自己的 inode 号以及用户数据块（见 图 2.）。]]></content>
  </entry>
  <entry>
    <title><![CDATA[TopK问题]]></title>
    <url>%2F2019%2F09%2F08%2FTopK%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述：海量数据寻找 第 K大的数字 解法1： 首先随便找一个数字当做哨兵，比该数字大的放在哨兵的前面，假设为集合A，比该数字小的放到集合B。 统计出来集合A的大小，为T。 如果T的大小比K小，则在 集合B 中寻找K-T大小的数字 如果T的大小比K大，则在集合A中继续寻找数字当做哨兵，进行集合分割。]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[daemon 进程为什么要fork两次，与后台运行程序区别？]]></title>
    <url>%2F2019%2F09%2F08%2Fdaemon-%E8%BF%9B%E7%A8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81fork%E4%B8%A4%E6%AC%A1%EF%BC%8C%E4%B8%8E%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F%E5%8C%BA%E5%88%AB%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[daemon进程是后台守护进程daemon函数存在的原因是因为控制终端由于某些原因（如断开终端链接）会发送一些信号的原因。而接收进程处理这些信号缺省动作会让进程退出。这些信号会由于终端上敲一些特殊按键而产生。 12345678910111213141516171819202122232425int daemon(void)&#123; pid_t pid = fork(); if( pid != 0 ) exit(0);//parent //first children if(setsid() == -1) &#123; printf(&quot;setsid failed\n&quot;); assert(0); exit(-1); &#125; umask(0); pid = fork(); if( pid != 0) exit(0); //second children chdir (&quot;/&quot;); for (int i = 0; i &lt; 3; i++) &#123; close (i); &#125; int stdfd = open (&quot;/dev/null&quot;, O_RDWR); dup2(stdfd, STDOUT_FILENO); dup2(stdfd, STDERR_FILENO); return 0;&#125; 第一次fork 的作用 是让shell 认为本条命令已经终止，不用挂在终端输入上。还有一个作用是为后面setsid服务。setsid的调用者不能让进程组组长（group leader）.此时父进程是进程组长。 setsid() 是本函数最重要的一个调用。它完成了daemon函数想要做的大部分事情。调用完整个函数。子进程是会话组长(sid==pid)，也是进程组组长(pgid == pid)，并且脱离了原来控制终端。到了这一步，基本上不管控制终端如何怎么样。新的进程都不会收到那些信号。 经过前面2个步骤，基本想要做的都做了。第2次fork不是必须的。也看到很多开源服务没有fork第二次。fork第二次主要目的是。防止进程再次打开一个控制终端。因为打开一个控制终端的前提条件是该进程必须是会话组长。再fork一次，子进程ID != sid（sid是进程父进程的sid）。所以也无法打开新的控制终端。 daemon目的就是防止终端产生的一些信号让进程退出。上面函数并没有直接调用signal函数去处理它。而是间接通过fork和setsid函数使用更少代码优雅处理。而被有些人误以为是僵死进程的原因需要这样处理。 守护进程与用&amp;结尾的后台运行程序有什么区别呢？最大的区别有几点：1)守护进程已经完全脱离终端控制台了，而后台程序并未完全脱离终端，在终端未关闭前还是会往终端输出结果2)守护进程在关闭终端控制台时不会受影响，而后台程序会随用户退出而停止，需要在以nohug xxx &amp; 格式运行才能避免影响3)守护进程的会话组和当前目录，文件描述符都是独立的。后台运行只是终端进行了一次fork，让程序在后台执行，这些都没改变。]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git fork 别人的项目后再同步]]></title>
    <url>%2F2019%2F09%2F08%2Fgit-fork-%E5%88%AB%E4%BA%BA%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%86%8D%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[123456git remote add upstream fork的原始git 地址git remote -v ;git fetch upstream; git merge upstream/master;git pull origin master;git push git remote -v //可以查看 添加后的分支状态 git fetch upstream //从原始仓库更新同步代码 git merge upstream/master //合并到本地代码 git pull origin master // 更新合并自己的远程仓库的代码 git push //向自己远程仓库推送刚才同步源仓库后的代码]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[敏捷开发]]></title>
    <url>%2F2019%2F09%2F08%2F%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[敏捷开发的定义以用户的需求进化作为核心，采用迭代、循序渐进的方法进行软件开发。 换句话说就是把一个大的项目分为多个相互联系，但也可以独立运行的小项目（story？），并分别完成，在这个过程中软件一直处于可使用的状态。 应用场景和特点在软件项目的构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。 开发宣言个体和交互 胜过过程和工具 可以工作的软件 胜过 面面俱到的文档 客户合作 胜过 合同谈判 响应变化 胜过 遵循计划注：虽然右项也有价值，但是我们认为左项具有更大的价值。 开发原则 快速迭代 让测试人员和开发者参与需求讨论 编写可测试的需求文档 开始就用“用户故事”（user story）的方法来编写需求文档。 多沟通，尽量减少文档 做好产品原型建议使用草图和模型来阐明用户界面，并不是所有人都可以理解一份复杂的文档，但人人都会看图。 及早考虑测试。]]></content>
  </entry>
  <entry>
    <title><![CDATA[、释放命令]]></title>
    <url>%2F2019%2F09%2F08%2F%E3%80%81%E9%87%8A%E6%94%BE%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1234567891011free -m 查看内存使用情况echo 1 &gt; /proc/sys/vm/drop_caches // 释放页缓存echo 2 &gt; /proc/sys/vm/drop_caches //释放dentries和inodesecho 3 &gt; /proc/sys/vm/drop_caches // 释放所有缓存到这里内存就释放完了，现在drop_caches中的值为1，如果现在想让操作系统重新分配内存，那么设置drop_caches的值为0即可：echo 0 &gt; /proc/sys/vm/drop_cachesfree m]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[extren关键字]]></title>
    <url>%2F2019%2F09%2F08%2Fextren%E5%85%B3%E9%94%AE%E5%AD%97%2F</url>
    <content type="text"><![CDATA[@[toc] 首先 明白 这个单词 是什么意思？Extern : 外部 的意思 用法置于 变量或者函数前，表示变量或者函数的定义在别的文件中，提示 编译器 遇到此变量和函数时，在其他模块中寻找其定义。 作用 主要有两个第一个 ： 与 “C” 一起连用时，如 extern “C” void fun（int a，int b）告诉编译器在编译fun 这个函数名的时候按照C的规则去编译。而不是C++ 第二个： 当extern 不与C 一起修饰变量或函数时。如在头文件中：externa int g_int ;作用是： 声明函数或者全局变量 的作用范围的关键字，声明的函数或者变量可以在本模块或者其他模块中使用。记住，它 是一个声明不是定义。 extern用在变量声明中常常有这样一个作用，你在.c文件中声明了一个全局的变量，这个全局的变量如果要被引用，就放在.h中并用extern来声明。 .具体解释及示例2.1.extern的变量和函数声明extern用于修饰变量或函数，用于声明当前变量或函数可以在本模块或者其他模块中使用。不过要记住的是extern只是声明，而不是定义，也就是说extern并不分配空间。而这个查找的过程是在连接的过程中进行的，因此编译阶段虽然找不到该变量或函数，但是也不会报错。下面用三个例子来看一看。 （1）无extern声明，有变量定义。 stdafx.cpp #include &quot;stdafx.h&quot; int g_test; main.cpp int _tmain(int argc, _TCHAR* argv[]) { g_test=2; std::cout&lt;&lt;g_test; return 0; }提示错误，因为此时main中不能调用到g_test。1&gt;d:\microsoft visual studio 9.0\projects\testcpp\testcpp\testcpp.cpp(25) : error C2065: “g_test”: 未声明的标识符1&gt;d:\microsoft visual studio 9.0\projects\testcpp\testcpp\testcpp.cpp(26) : error C2065: “g_test”: 未声明的标识符 （2）有extern声明，无变量定义。 stdafx.h extern int g_test; main.cpp int _tmain(int argc, _TCHAR* argv[]) { g_test=2; std::cout&lt;&lt;g_test; return 0; }提示错误，因为extern只是声明，并没有定义，也就没有空间的分配，而这时一个链接错误，编译的时候没办法发现。1&gt;TestCpp.obj : error LNK2001: 无法解析的外部符号 “int g_test” (?g_test@@3HA)1&gt;D:\Microsoft Visual Studio 9.0\Projects\TestCpp\Debug\TestCpp.exe : fatal error LNK1120: 1 个无法解析的外部命令 （3）有extern声明，也有变量定义。 stdafx.cpp #include &quot;stdafx.h&quot; int g_test; stdafx.h extern int g_test; main.cpp int _tmain(int argc, _TCHAR* argv[]) { g_test=2; std::cout&lt;&lt;g_test; return 0; }程序执行正常。]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[static关键字]]></title>
    <url>%2F2019%2F09%2F08%2Fstatic%E5%85%B3%E9%94%AE%E5%AD%97%2F</url>
    <content type="text"><![CDATA[@[toc] 静态全局变量 在全局变量前面，加上关键字 static ，该变量就成为一个静态全局变量特点： 1 在全局数据区分配内存 2 未经初始化的静态全局变量会被程序自动初始化为0（自动变量的值 是随机的，除非它被显式初始化） 3 静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见。 理解： 避免变量 命名冲突，和其他文件中变量相撞。 //Example 2 //File1 #include &lt;iostream.h&gt; void fn(); static int n; //定义静态全局变量 void main() { n=20; cout&lt;&lt;n&lt;&lt;endl; fn(); } //File2 #include &lt;iostream.h&gt; extern int n; void fn() { n++; cout&lt;&lt;n&lt;&lt;endl; }编译并运行Example 2，您就会发现上述代码可以分别通过编译，但运行时出现错误。试着将 “static int n; //定义静态全局变量”改为 “int n; //定义全局变量”再次编译运行程序，细心体会“全局变量”和”静态全局变量”的区别。 静态局部变量特点： 静态局部变量 在全局数据区分配内存 静态局部变量在程序执行到该对象的声明处时，被第一次初始化，即 以后的函数调用不在进行初始化。 静态局部变量一般在声明处初始化，如果没有显式初始化，会被程序自动初始化为0 会始终驻留在 全局数据区，直到程序运行结束，但其作用域为局部作用域，当定义它的函数或者语句块结束时，其作用域随之结束。 通常，在函数体内定义了一个变量，每当程序运行到该语句时都会给该局部变量分配栈内存。但随着程序退出函数体，系统就会收回栈内存，局部变量也相应失效。但有时候我们需要在两次调用之间对变量的值进行保存。通常的想法是定义一个全局变量来实现。但这样一来，变量已经不再属于函数本身了，不再仅受函数的控制，给程序的维护带来不便。静态局部变量正好可以解决这个问题。静态局部变量保存在全局数据区，而不是保存在栈中，每次的值保持到下一次调用，直到下次赋新值。 理解：静态全局变量 维护 比 静态局部变量维护开销大?static 默认进行初始化为0，并且数据是放在全局数据区中的。两次函数调用就可以对同一个变量进行操作。 静态函数 只能在声明它的文件中可用，其他文件不能被使用 ，从而避免命名冲突 类中的static 关键字静态数据成员非静态数据成员，会存在多份拷贝，静态数据成员，会存在一份拷贝，由该类型的所有对象共享访问。所以静态成员的值对每个对象都是一样的，它的值可以更新， 静态数据成员存储在全局数据区。静态数据成员定义时要分配空间，所以不能在类声明中定义。 静态数据成员和普通数据成员一样遵从public,protected,private访问规则； 实现信息隐藏，静态数据成员可以是private成员，而全局变量不可以 静态成员函数普通函数拥有this 指针 会指向对象本身、但是与普通函数相比，静态成员函数由于不是与任何的对象相联系，因此不具有this 指针。 从而更进一步说，它无法访问属于类对象的非静态数据成员，也无法访问非静态成员函数，只能调用其余的静态成员函数。 #include &lt;iostream.h&gt; class Myclass { public: Myclass(int a,int b,int c); static void GetSum();/声明静态成员函数 private: int a,b,c; static int Sum;//声明静态数据成员 }; int Myclass::Sum=0;//定义并初始化静态数据成员 Myclass::Myclass(int a,int b,int c) { this-&gt;a=a; this-&gt;b=b; this-&gt;c=c; Sum+=a+b+c; //非静态成员函数可以访问静态数据成员 } void Myclass::GetSum() //静态成员函数的实现 { // cout&lt;&lt;a&lt;&lt;endl; //错误代码，a是非静态数据成员 cout&lt;&lt;&quot;Sum=&quot;&lt;&lt;Sum&lt;&lt;endl; } void main() { Myclass M(1,2,3); M.GetSum(); Myclass N(4,5,6); N.GetSum(); Myclass::GetSum(); }特点 非静态成员函数可以任意访问静态成员函数和静态数据成员。 静态成员函数不能访问非静态成员函数和非静态数据成员。（因为没有this 指针） 由于没有this 指针的额外开销，静态成员函数与类的全局函数相比速度会有少许的增长。]]></content>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单例模式]]></title>
    <url>%2F2019%2F09%2F08%2F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;#include &lt;pthread.h&gt;#include &lt;unistd.h&gt;#include &lt;stdlib.h&gt;class singleton&#123;private: static volatile singleton *p; static pthread_mutex_t mtx; singleton()&#123;&#125;public: static singleton * getInstance();&#125;;singleton * singleton::p = NULL;pthread_mutex_t singleton::mtx;singleton * singleton::getInstance()&#123; if (p == NULL)&#123; pthread_mutex_lock(&amp;mtx); if (p == NULL) p = new singleton; pthread_mutex_unlock(&amp;mtx); &#125; return p;&#125;int main()&#123; singleton * ptr = singleton::getInstance(); singleton * ptr1 = singleton::getInstance(); return 0;&#125;]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git子模块]]></title>
    <url>%2F2019%2F09%2F08%2Fgit%E5%AD%90%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97 git submodule init ; git submodule update; git checkout master ; git submodule foreach git checkout master ; git pull ; git submodule foreach git pull]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[article title]]></title>
    <url>%2F2019%2F09%2F08%2Farticle-title%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
